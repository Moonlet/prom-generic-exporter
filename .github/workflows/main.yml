# This is a basic workflow to help you get started with Actions

name: Prometheus Generic Exporter Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #   push:
  #     branches: [ master ]
  #   pull_request:
  #     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.1.0
        with:
          version: 7.9.5

      # Runs a single command using the runners shell
      - name: Install dependencies
        run: pnpm install

      # Runs a set of commands using the runners shell
      - name: Build
        id: build
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
          # ln -s $PWD/node_modules/.pnpm $PWD/packages/agent/node_modules/.pnpm
        run: |
          npm version --commit-hooks false --git-tag-version false $INPUT_VERSION
          pnpm run build
          cd build
          npm install --production node-linux-x64@lts
          chmod +x prom-generic-exporter
          VERSION=$(node -e "console.log(require('./package.json').version)")
          APP_NAME=$(node -e "console.log(require('./package.json').name)")
          cd ..
          mv build ${APP_NAME}-linux-x64-${VERSION}
          tar -czvf ${APP_NAME}-linux-x64-${VERSION}.tar.gz ${APP_NAME}-linux-x64-${VERSION}
          echo "APP_TAG=${APP_NAME}-v${VERSION}" >> $GITHUB_ENV
          echo "APP_VERSION=${VERSION}" >> $GITHUB_ENV

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Version bump
          file_pattern: package.json

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "*.tar.gz"
          tag: ${{ env.APP_TAG }}
          overwrite: true
          file_glob: true

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push image to DockerHub
        run: |
          pnpm run docker \
            --tag krisboit/prom-generic-exporter:latest \
            --tag krisboit/prom-generic-exporter:${{APP_VERSION}}
            
          docker push krisboit/prom-generic-exporter:latest
          docker push krisboit/prom-generic-exporter:${{APP_VERSION}}
